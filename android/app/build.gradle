apply plugin: 'com.android.application'

android {
    namespace "com.chorddice.app"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.chorddice.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 28
        versionName "1.8.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    // Signing configuration - supports both KEYSTORE_FILE and KEYSTORE_PATH for compatibility
    def keystoreFilePath = System.getenv("KEYSTORE_FILE") ?: System.getenv("KEYSTORE_PATH") ?: "keystore.jks"
    def keystorePwd = System.getenv("KEYSTORE_PASSWORD")
    def keyAliasName = System.getenv("KEY_ALIAS")
    def keyPwd = System.getenv("KEY_PASSWORD")
    
    // Only sign if all credentials are present AND keystore file actually exists
    def keystoreExists = file(keystoreFilePath).exists()
    def shouldSign = keystorePwd && keyAliasName && keyPwd && keystoreExists
    
    signingConfigs {
        if (shouldSign) {
            release {
                storeFile file(keystoreFilePath)
                storePassword keystorePwd
                keyAlias keyAliasName
                keyPassword keyPwd
            }
        }
    }
    
    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
