name: Build and Deploy Android App

on:
  push:
    tags:
      - 'v*'  # Deploy on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual trigger
    inputs:
      deploy_to_play_store:
        description: 'Deploy to Google Play Store'
        required: true
        default: false
        type: boolean
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build React app
      run: npm run build
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Android SDK components
      run: |
        sdkmanager "platforms;android-34" "platforms;android-35" "build-tools;34.0.0" "build-tools;35.0.0"
      
    - name: Make gradlew executable
      run: chmod +x android/gradlew
      
    - name: Set version code from tag
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION_CODE=$((10000 + GITHUB_RUN_NUMBER))
        echo "Setting version code to: $VERSION_CODE"
        sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" android/app/build.gradle
        sed -i "s/versionName \"[^\"]*\"/versionName \"$TAG_NAME\"/" android/app/build.gradle
        
    - name: Clean Android build cache
      run: |
        rm -rf android/app/build
        rm -rf android/app/.gradle
        rm -rf android/.gradle
        echo "✅ Build cache cleaned"
      
    - name: Sync Capacitor
      run: npx cap sync android
      
    - name: Verify package configuration
      run: |
        echo "Checking package configuration..."
        grep -A 5 "applicationId" android/app/build.gradle || true
        grep -A 5 "namespace" android/app/build.gradle || true
        echo "MainActivity location:"
        find android/app/src/main/java -name "MainActivity.java" || true
      
    - name: Check Android setup
      run: |
        echo "Android project structure:"
        ls -la android/
        echo "Gradle wrapper:"
        ls -la android/gradlew || echo "gradlew not found"
        echo "Build gradle:"
        ls -la android/app/build.gradle || echo "build.gradle not found"
      
    - name: Setup keystore for signing
      if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_play_store == 'true') }}
      run: |
        echo "Creating and validating keystore..."
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
        
        # Check file was created and has content
        if [ ! -f android/app/keystore.jks ]; then
          echo "❌ Keystore file not created"
          exit 1
        fi
        
        SIZE=$(stat -c%s android/app/keystore.jks)
        if [ "$SIZE" -lt 100 ]; then
          echo "❌ Keystore file is too small ($SIZE bytes) - likely invalid"
          exit 1
        fi
        
        # Validate keystore with keytool
        keytool -list -v -keystore android/app/keystore.jks \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -alias "${{ secrets.KEY_ALIAS }}" 2>&1 | head -20
        
        if [ $? -eq 0 ]; then
          echo "✅ Keystore validated successfully ($SIZE bytes)"
        else
          echo "❌ Keystore validation failed - check your secrets"
          exit 1
        fi
        
    - name: Build Android APK
      env:
        KEYSTORE_FILE: keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        cd android
        echo "Building with keystore at: app/$KEYSTORE_FILE"
        ls -lh app/keystore.jks || echo "WARNING: Keystore not found"
        ./gradlew clean
        ./gradlew assembleRelease --no-daemon --stacktrace
        
    - name: Build Android App Bundle (AAB)
      env:
        KEYSTORE_FILE: keystore.jks
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        cd android
        ./gradlew bundleRelease --no-daemon --stacktrace
        
    - name: Verify signing
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_play_store == 'true') }}
      run: |
        if [ -f android/app/build/outputs/apk/release/app-release.apk ]; then
          echo "✅ APK built successfully"
          # Use build-tools apksigner
          $ANDROID_HOME/build-tools/35.0.0/apksigner verify android/app/build/outputs/apk/release/app-release.apk && echo "✅ APK is properly signed" || echo "⚠️ Could not verify APK signature"
        fi
        if [ -f android/app/build/outputs/bundle/release/app-release.aab ]; then
          echo "✅ AAB built successfully"
          jarsigner -verify android/app/build/outputs/bundle/release/app-release.aab && echo "✅ AAB is properly signed" || echo "⚠️ Could not verify AAB signature"
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: chord-dice-apk
        path: android/app/build/outputs/apk/release/app-release*.apk
        
    - name: Upload AAB
      if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_play_store == 'true') }}
      uses: actions/upload-artifact@v4
      with:
        name: chord-dice-aab
        path: android/app/build/outputs/bundle/release/app-release.aab
        
    - name: Validate Play Store secrets
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_play_store == 'true') }}
      run: |
        if [ -z "${{ secrets.SERVICE_ACCOUNT_JSON }}" ]; then
          echo "❌ ERROR: SERVICE_ACCOUNT_JSON secret is missing for Play Store upload"
          exit 1
        fi
        echo "✅ Play Store secrets validated"
        
    - name: Upload to Google Play Store (Internal Testing)
      if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_play_store == 'true') }}
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
        packageName: com.chorddice.app
        releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
        track: internal
        status: draft
        inAppUpdatePriority: 2
        releaseName: "${{ github.ref_name }} - Chord Riff Generator"
        
    - name: Create Release Info
      run: |
        echo "## 📱 Chord Riff Generator - Android Release" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Build Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **APK**: Ready for sideloading or testing" >> $GITHUB_STEP_SUMMARY
        echo "- **AAB**: Ready for Google Play Store upload" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.deploy_to_play_store }}" == "true" ]]; then
          echo "### 🚀 Auto-Deploy Status:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Uploaded to Google Play Internal Testing track" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Check [Google Play Console](https://play.google.com/console/) for deployment status" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 Promote through tracks: Internal → Alpha → Beta → Production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Version Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 📋 To Deploy to Google Play Store:" >> $GITHUB_STEP_SUMMARY
          echo "1. Create a version tag (e.g., \`git tag v1.0.0 && git push origin v1.0.0\`)" >> $GITHUB_STEP_SUMMARY
          echo "2. Or use the 'Actions' tab → 'Build and Deploy Android App' → 'Run workflow' with deployment enabled" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Manual Upload Alternative:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the AAB file from the artifacts above" >> $GITHUB_STEP_SUMMARY
          echo "2. Go to [Google Play Console](https://play.google.com/console/)" >> $GITHUB_STEP_SUMMARY
          echo "3. Navigate to your app → Testing → Internal testing" >> $GITHUB_STEP_SUMMARY
          echo "4. Create new release and upload the AAB file" >> $GITHUB_STEP_SUMMARY
        fi